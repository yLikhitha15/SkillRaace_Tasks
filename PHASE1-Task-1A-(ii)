import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

# Input dataset
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
# Output dataset
y = np.array([[0], [1], [1], [0]])

np.random.seed(42)

input_layer_neurons = X.shape[1]
hidden_layer_neurons = 2
output_layer_neurons = 1

weights_input_hidden = np.random.uniform(size=(input_layer_neurons, hidden_layer_neurons))
weights_hidden_output = np.random.uniform(size=(hidden_layer_neurons, output_layer_neurons))

# Training the neural network
epochs = 10000
learning_rate = 0.1

for epoch in range(epochs):
    hidden_layer_input = np.dot(X, weights_input_hidden)
    hidden_layer_output = sigmoid(hidden_layer_input)

    final_layer_input = np.dot(hidden_layer_output, weights_hidden_output)
    final_layer_output = sigmoid(final_layer_input)

    # Calculate the error
    error = y - final_layer_output

    # Back Propagation
    d_final_layer_output = error * sigmoid_derivative(final_layer_output)
    error_hidden_layer = d_final_layer_output.dot(weights_hidden_output.T)
    d_hidden_layer_output = error_hidden_layer * sigmoid_derivative(hidden_layer_output)

    # Update weights
    weights_hidden_output += hidden_layer_output.T.dot(d_final_layer_output) * learning_rate
    weights_input_hidden += X.T.dot(d_hidden_layer_output) * learning_rate

# Output after training
print("Output after training:")
print(final_layer_output)
